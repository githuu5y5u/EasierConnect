name: Release

on:
  release:
    types: [prereleased]
  push:
    branches:
      - main
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/*.yml"

permissions: write-all

jobs:
  buildGUI:
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: 386
          - goos: linux
            goarch: amd64
      #    - goos: linux  太菜了, 暂时不知道怎么直接在64位机上编译 32位 linux的 cgo.
      #      goarch: 386
      fail-fast: false

    runs-on: ubuntu-20.04
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      CXX_FOR_TARGET: ${{ matrix.cxx }}
      CGO_ENABLED: 1

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3

      - name: Show workflow information
        id: get_filename
        run: |
          export _NAME=$GOOS-$GOARCH$GOARM
          echo "GOOS: $GOOS, GOARCH: $GOARCH, GOARM: $GOARM, RELEASE_NAME: $_NAME"
          echo "::set-output name=ASSET_NAME::$_NAME"
          echo "ASSET_NAME=$_NAME" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ^1.19
      - name: Get project dependencies
        run: |
          go mod download
          sudo apt-get update
          sudo apt-get install gcc build-essential gcc-multilib g++-multilib gcc-mingw-w64
      - name: GCC for windows on amd64
        if: matrix.goos == 'windows' && matrix.GOARCH == 'amd64'
        run: |
          go env -w CC=x86_64-w64-mingw32-gcc
      - name: GCC for windows on i386
        if: matrix.goos == 'windows' && matrix.GOARCH == '386'
        run: |
          go env -w CC=i686-w64-mingw32-gcc
      - name: Linux environment
        if: matrix.goos == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install libgl1-mesa-dev xorg-dev
      - name: Build
        run: |
          echo "CC: $CC"
          mkdir -p build_assets
          go build -v -o build_assets/EasierConnect -trimpath -ldflags "-s -w -buildid=" .
      - name: Run UPX
        uses: crazy-max/ghaction-upx@v2
        with:
          version: latest
          files: |
            ./build_assets/EasierConnect
          args: -9
      - name: Rename Windows EasierConnect
        if: matrix.goos == 'windows'
        run: |
          cd ./build_assets || exit 1
          mv EasierConnect EasierConnect.exe
      - name: Create ZIP archive
        run: |
          pushd build_assets || exit 1
          zip -9vr ../EasierConnect-GUI-$ASSET_NAME.zip .
          popd || exit 1
      
      - name: Upload release binary
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} EasierConnect-GUI-${{ steps.get_filename.outputs.ASSET_NAME }}.zip
